{"ast":null,"code":"import * as t from \"react\";\nfunction e() {\n  return (e = Object.assign || function (t) {\n    for (var e = 1; e < arguments.length; e++) {\n      var n = arguments[e];\n      for (var r in n) Object.prototype.hasOwnProperty.call(n, r) && (t[r] = n[r]);\n    }\n    return t;\n  }).apply(this, arguments);\n}\nconst n = [\"children\", \"options\"],\n  r = [\"allowFullScreen\", \"allowTransparency\", \"autoComplete\", \"autoFocus\", \"autoPlay\", \"cellPadding\", \"cellSpacing\", \"charSet\", \"className\", \"classId\", \"colSpan\", \"contentEditable\", \"contextMenu\", \"crossOrigin\", \"encType\", \"formAction\", \"formEncType\", \"formMethod\", \"formNoValidate\", \"formTarget\", \"frameBorder\", \"hrefLang\", \"inputMode\", \"keyParams\", \"keyType\", \"marginHeight\", \"marginWidth\", \"maxLength\", \"mediaGroup\", \"minLength\", \"noValidate\", \"radioGroup\", \"readOnly\", \"rowSpan\", \"spellCheck\", \"srcDoc\", \"srcLang\", \"srcSet\", \"tabIndex\", \"useMap\"].reduce((t, e) => (t[e.toLowerCase()] = e, t), {\n    for: \"htmlFor\"\n  }),\n  o = {\n    amp: \"&\",\n    apos: \"'\",\n    gt: \">\",\n    lt: \"<\",\n    nbsp: \" \",\n    quot: \"“\"\n  },\n  c = [\"style\", \"script\"],\n  a = /([-A-Z0-9_:]+)(?:\\s*=\\s*(?:(?:\"((?:\\\\.|[^\"])*)\")|(?:'((?:\\\\.|[^'])*)')|(?:\\{((?:\\\\.|{[^}]*?}|[^}])*)\\})))?/gi,\n  u = /mailto:/i,\n  i = /\\n{2,}$/,\n  l = /^( *>[^\\n]+(\\n[^\\n]+)*\\n*)+\\n{2,}/,\n  s = /^ *> ?/gm,\n  _ = /^ {2,}\\n/,\n  f = /^(?:( *[-*_]) *){3,}(?:\\n *)+\\n/,\n  d = /^\\s*(`{3,}|~{3,}) *(\\S+)? *\\n([\\s\\S]+?)\\s*\\1 *(?:\\n *)+\\n?/,\n  p = /^(?: {4}[^\\n]+\\n*)+(?:\\n *)+\\n?/,\n  g = /^(`+)\\s*([\\s\\S]*?[^`])\\s*\\1(?!`)/,\n  m = /^(?:\\n *)*\\n/,\n  y = /\\r\\n?/g,\n  h = /^\\[\\^([^\\]]+)](:.*)\\n/,\n  k = /^\\[\\^([^\\]]+)]/,\n  x = /\\f/g,\n  b = /^\\s*?\\[(x|\\s)\\]/,\n  v = /^ *(#{1,6}) *([^\\n]+?)(?: +#*)?(?:\\n *)*(?:\\n|$)/,\n  S = /^([^\\n]+)\\n *(=|-){3,} *(?:\\n *)+\\n/,\n  $ = /^ *(?!<[a-z][^ >/]* ?\\/>)<([a-z][^ >/]*) ?([^>]*)\\/{0}>\\n?(\\s*(?:<\\1[^>]*?>[\\s\\S]*?<\\/\\1>|(?!<\\1)[\\s\\S])*?)<\\/\\1>\\n*/i,\n  w = /&([a-z]+);/g,\n  z = /^<!--[\\s\\S]*?(?:-->)/,\n  E = /^(data|aria|x)-[a-z_][a-z\\d_.-]*$/,\n  A = /^ *<([a-z][a-z0-9:]*)(?:\\s+((?:<.*?>|[^>])*))?\\/?>(?!<\\/\\1>)(\\s*\\n)?/i,\n  R = /^\\{.*\\}$/,\n  I = /^(https?:\\/\\/[^\\s<]+[^<.,:;\"')\\]\\s])/,\n  M = /^<([^ >]+@[^ >]+)>/,\n  O = /^<([^ >]+:\\/[^ >]+)>/,\n  B = / *\\n+$/,\n  L = /(?:^|\\n)( *)$/,\n  T = /-([a-z])?/gi,\n  j = /^(.*\\|?.*)\\n *(\\|? *[-:]+ *\\|[-| :]*)\\n((?:.*\\|.*\\n)*)\\n?/,\n  C = /^\\[([^\\]]*)\\]:\\s*(\\S+)\\s*(\"([^\"]*)\")?/,\n  D = /^!\\[([^\\]]*)\\] ?\\[([^\\]]*)\\]/,\n  N = /^\\[([^\\]]*)\\] ?\\[([^\\]]*)\\]/,\n  Z = /(\\[|\\])/g,\n  F = /(\\n|^[-*]\\s|^#|^ {2,}|^-{2,}|^>\\s)/,\n  P = /\\t/g,\n  G = /^ *\\| */,\n  H = /(^ *\\||\\| *$)/g,\n  q = / *$/,\n  U = /^ *:-+: *$/,\n  V = /^ *:-+ *$/,\n  W = /^ *-+: *$/,\n  Q = /^([*_])\\1((?:\\[.*?\\][([].*?[)\\]]|<.*?>(?:.*?<.*?>)?|`.*?`|~+.*?~+|.)*?)\\1\\1(?!\\1)/,\n  X = /^([*_])((?:\\[.*?\\][([].*?[)\\]]|<.*?>(?:.*?<.*?>)?|`.*?`|~+.*?~+|.)*?)\\1(?!\\1|\\w)/,\n  J = /^~~((?:\\[.*?\\]|<.*?>(?:.*?<.*?>)?|`.*?`|.)*?)~~/,\n  K = /^\\\\([^0-9A-Za-z\\s])/,\n  Y = /^[\\s\\S]+?(?=[^0-9A-Z\\s\\u00c0-\\uffff&;.()'\"]|\\d+\\.|\\n\\n| {2,}\\n|\\w+:\\S|$)/i,\n  tt = /^\\n+/,\n  et = /^([ \\t]*)/,\n  nt = /\\\\([^0-9A-Z\\s])/gi,\n  rt = new RegExp(\"^( *)((?:[*+-]|\\\\d+\\\\.)) +\"),\n  ot = new RegExp(\"^( *)((?:[*+-]|\\\\d+\\\\.)) +[^\\\\n]*(?:\\\\n(?!\\\\1(?:[*+-]|\\\\d+\\\\.) )[^\\\\n]*)*(\\\\n|$)\", \"gm\"),\n  ct = new RegExp(\"^( *)((?:[*+-]|\\\\d+\\\\.)) [\\\\s\\\\S]+?(?:\\\\n{2,}(?! )(?!\\\\1(?:[*+-]|\\\\d+\\\\.) (?!(?:[*+-]|\\\\d+\\\\.) ))\\\\n*|\\\\s*\\\\n*$)\"),\n  at = \"(?:\\\\[[^\\\\]]*\\\\]|[^\\\\[\\\\]]|\\\\](?=[^\\\\[]*\\\\]))*\",\n  ut = new RegExp(\"^\\\\[(\" + at + \")\\\\]\\\\(\\\\s*<?((?:[^\\\\s\\\\\\\\]|\\\\\\\\.)*?)>?(?:\\\\s+['\\\"]([\\\\s\\\\S]*?)['\\\"])?\\\\s*\\\\)\"),\n  it = new RegExp(\"^!\\\\[(\" + at + \")\\\\]\\\\(\\\\s*<?((?:[^\\\\s\\\\\\\\]|\\\\\\\\.)*?)>?(?:\\\\s+['\\\"]([\\\\s\\\\S]*?)['\\\"])?\\\\s*\\\\)\"),\n  lt = [l, p, d, v, S, z, ot, ct, j],\n  st = [...lt, /^[^\\n]+(?:  \\n|\\n{2,})/, $, A];\nfunction _t(t) {\n  return t.replace(/[ÀÁÂÃÄÅàáâãäåæÆ]/g, \"a\").replace(/[çÇ]/g, \"c\").replace(/[ðÐ]/g, \"d\").replace(/[ÈÉÊËéèêë]/g, \"e\").replace(/[ÏïÎîÍíÌì]/g, \"i\").replace(/[Ññ]/g, \"n\").replace(/[øØœŒÕõÔôÓóÒò]/g, \"o\").replace(/[ÜüÛûÚúÙù]/g, \"u\").replace(/[ŸÿÝý]/g, \"y\").replace(/[^a-z0-9- ]/gi, \"\").replace(/ /gi, \"-\").toLowerCase();\n}\nfunction ft(t) {\n  return W.test(t) ? \"right\" : U.test(t) ? \"center\" : V.test(t) ? \"left\" : null;\n}\nfunction dt(t, e, n) {\n  const r = n.t;\n  n.t = !0;\n  const o = e(t.trim(), n);\n  n.t = r;\n  let c = [[]];\n  return o.forEach(function (t, e) {\n    \"tableSeparator\" === t.type ? 0 !== e && e !== o.length - 1 && c.push([]) : (\"text\" !== t.type || null != o[e + 1] && \"tableSeparator\" !== o[e + 1].type || (t.content = t.content.replace(q, \"\")), c[c.length - 1].push(t));\n  }), c;\n}\nfunction pt(t, e, n) {\n  n.o = !0;\n  const r = dt(t[1], e, n),\n    o = t[2].replace(H, \"\").split(\"|\").map(ft),\n    c = function (t, e, n) {\n      return t.trim().split(\"\\n\").map(function (t) {\n        return dt(t, e, n);\n      });\n    }(t[3], e, n);\n  return n.o = !1, {\n    align: o,\n    cells: c,\n    header: r,\n    type: \"table\"\n  };\n}\nfunction gt(t, e) {\n  return null == t.align[e] ? {} : {\n    textAlign: t.align[e]\n  };\n}\nfunction mt(t) {\n  return function (e, n) {\n    return n.o ? t.exec(e) : null;\n  };\n}\nfunction yt(t) {\n  return function (e, n) {\n    return n.o || n.u ? t.exec(e) : null;\n  };\n}\nfunction ht(t) {\n  return function (e, n) {\n    return n.o || n.u ? null : t.exec(e);\n  };\n}\nfunction kt(t) {\n  return function (e) {\n    return t.exec(e);\n  };\n}\nfunction xt(t, e, n) {\n  if (e.o || e.u) return null;\n  if (n && !n.endsWith(\"\\n\")) return null;\n  let r = \"\";\n  t.split(\"\\n\").every(t => !lt.some(e => e.test(t)) && (r += t + \"\\n\", t.trim()));\n  const o = r.trimEnd();\n  return \"\" == o ? null : [r, o];\n}\nfunction bt(t) {\n  try {\n    if (decodeURIComponent(t).replace(/[^A-Za-z0-9/:]/g, \"\").match(/^\\s*(javascript|vbscript|data):/i)) return null;\n  } catch (t) {\n    return null;\n  }\n  return t;\n}\nfunction vt(t) {\n  return t.replace(nt, \"$1\");\n}\nfunction St(t, e, n) {\n  const r = n.o || !1,\n    o = n.u || !1;\n  n.o = !0, n.u = !0;\n  const c = t(e, n);\n  return n.o = r, n.u = o, c;\n}\nfunction $t(t, e, n) {\n  const r = n.o || !1,\n    o = n.u || !1;\n  n.o = !1, n.u = !0;\n  const c = t(e, n);\n  return n.o = r, n.u = o, c;\n}\nfunction wt(t, e, n) {\n  return n.o = !1, t(e + \"\\n\\n\", n);\n}\nconst zt = (t, e, n) => ({\n  content: St(e, t[1], n)\n});\nfunction Et() {\n  return {};\n}\nfunction At() {\n  return null;\n}\nfunction Rt(...t) {\n  return t.filter(Boolean).join(\" \");\n}\nfunction It(t, e, n) {\n  let r = t;\n  const o = e.split(\".\");\n  for (; o.length && (r = r[o[0]], void 0 !== r);) o.shift();\n  return r || n;\n}\nvar Mt;\nfunction Ot(n, H = {}) {\n  H.overrides = H.overrides || {}, H.slugify = H.slugify || _t, H.namedCodesToUnicode = H.namedCodesToUnicode ? e({}, o, H.namedCodesToUnicode) : o;\n  const q = H.createElement || t.createElement;\n  function U(t, n, ...r) {\n    const o = It(H.overrides, `${t}.props`, {});\n    return q(function (t, e) {\n      const n = It(e, t);\n      return n ? \"function\" == typeof n || \"object\" == typeof n && \"render\" in n ? n : It(e, `${t}.component`, t) : t;\n    }(t, H.overrides), e({}, n, o, {\n      className: Rt(null == n ? void 0 : n.className, o.className) || void 0\n    }), ...r);\n  }\n  function V(e) {\n    let n = !1;\n    H.forceInline ? n = !0 : H.forceBlock || (n = !1 === F.test(e));\n    const r = dt(ft(n ? e : `${e.trimEnd().replace(tt, \"\")}\\n\\n`, {\n      o: n\n    }));\n    for (; \"string\" == typeof r[r.length - 1] && !r[r.length - 1].trim();) r.pop();\n    if (null === H.wrapper) return r;\n    const o = H.wrapper || (n ? \"span\" : \"div\");\n    let c;\n    if (r.length > 1 || H.forceWrapper) c = r;else {\n      if (1 === r.length) return c = r[0], \"string\" == typeof c ? U(\"span\", {\n        key: \"outer\"\n      }, c) : c;\n      c = null;\n    }\n    return t.createElement(o, {\n      key: \"outer\"\n    }, c);\n  }\n  function W(e) {\n    const n = e.match(a);\n    return n ? n.reduce(function (e, n, o) {\n      const c = n.indexOf(\"=\");\n      if (-1 !== c) {\n        const a = function (t) {\n            return -1 !== t.indexOf(\"-\") && null === t.match(E) && (t = t.replace(T, function (t, e) {\n              return e.toUpperCase();\n            })), t;\n          }(n.slice(0, c)).trim(),\n          u = function (t) {\n            const e = t[0];\n            return ('\"' === e || \"'\" === e) && t.length >= 2 && t[t.length - 1] === e ? t.slice(1, -1) : t;\n          }(n.slice(c + 1).trim()),\n          i = r[a] || a,\n          l = e[i] = function (t, e) {\n            return \"style\" === t ? e.split(/;\\s?/).reduce(function (t, e) {\n              const n = e.slice(0, e.indexOf(\":\"));\n              return t[n.replace(/(-[a-z])/g, t => t[1].toUpperCase())] = e.slice(n.length + 1).trim(), t;\n            }, {}) : \"href\" === t ? bt(e) : (e.match(R) && (e = e.slice(1, e.length - 1)), \"true\" === e || \"false\" !== e && e);\n          }(a, u);\n        \"string\" == typeof l && ($.test(l) || A.test(l)) && (e[i] = t.cloneElement(V(l.trim()), {\n          key: o\n        }));\n      } else \"style\" !== n && (e[r[n] || n] = !0);\n      return e;\n    }, {}) : void 0;\n  }\n  const nt = [],\n    at = {},\n    lt = {\n      blockQuote: {\n        i: ht(l),\n        l: Mt.HIGH,\n        _: (t, e, n) => ({\n          content: e(t[0].replace(s, \"\"), n)\n        }),\n        p: (t, e, n) => U(\"blockquote\", {\n          key: n.g\n        }, e(t.content, n))\n      },\n      breakLine: {\n        i: kt(_),\n        l: Mt.HIGH,\n        _: Et,\n        p: (t, e, n) => U(\"br\", {\n          key: n.g\n        })\n      },\n      breakThematic: {\n        i: ht(f),\n        l: Mt.HIGH,\n        _: Et,\n        p: (t, e, n) => U(\"hr\", {\n          key: n.g\n        })\n      },\n      codeBlock: {\n        i: ht(p),\n        l: Mt.MAX,\n        _: t => ({\n          content: t[0].replace(/^ {4}/gm, \"\").replace(/\\n+$/, \"\"),\n          lang: void 0\n        }),\n        p: (t, e, n) => U(\"pre\", {\n          key: n.g\n        }, U(\"code\", {\n          className: t.lang ? `lang-${t.lang}` : \"\"\n        }, t.content))\n      },\n      codeFenced: {\n        i: ht(d),\n        l: Mt.MAX,\n        _: t => ({\n          content: t[3],\n          lang: t[2] || void 0,\n          type: \"codeBlock\"\n        })\n      },\n      codeInline: {\n        i: yt(g),\n        l: Mt.LOW,\n        _: t => ({\n          content: t[2]\n        }),\n        p: (t, e, n) => U(\"code\", {\n          key: n.g\n        }, t.content)\n      },\n      footnote: {\n        i: ht(h),\n        l: Mt.MAX,\n        _: t => (nt.push({\n          footnote: t[2],\n          identifier: t[1]\n        }), {}),\n        p: At\n      },\n      footnoteReference: {\n        i: mt(k),\n        l: Mt.HIGH,\n        _: t => ({\n          content: t[1],\n          target: `#${H.slugify(t[1])}`\n        }),\n        p: (t, e, n) => U(\"a\", {\n          key: n.g,\n          href: bt(t.target)\n        }, U(\"sup\", {\n          key: n.g\n        }, t.content))\n      },\n      gfmTask: {\n        i: mt(b),\n        l: Mt.HIGH,\n        _: t => ({\n          completed: \"x\" === t[1].toLowerCase()\n        }),\n        p: (t, e, n) => U(\"input\", {\n          checked: t.completed,\n          key: n.g,\n          readOnly: !0,\n          type: \"checkbox\"\n        })\n      },\n      heading: {\n        i: ht(v),\n        l: Mt.HIGH,\n        _: (t, e, n) => ({\n          content: St(e, t[2], n),\n          id: H.slugify(t[2]),\n          level: t[1].length\n        }),\n        p: (t, e, n) => (t.tag = `h${t.level}`, U(t.tag, {\n          id: t.id,\n          key: n.g\n        }, e(t.content, n)))\n      },\n      headingSetext: {\n        i: ht(S),\n        l: Mt.MAX,\n        _: (t, e, n) => ({\n          content: St(e, t[1], n),\n          level: \"=\" === t[2] ? 1 : 2,\n          type: \"heading\"\n        })\n      },\n      htmlComment: {\n        i: kt(z),\n        l: Mt.HIGH,\n        _: () => ({}),\n        p: At\n      },\n      image: {\n        i: yt(it),\n        l: Mt.HIGH,\n        _: t => ({\n          alt: t[1],\n          target: vt(t[2]),\n          title: t[3]\n        }),\n        p: (t, e, n) => U(\"img\", {\n          key: n.g,\n          alt: t.alt || void 0,\n          title: t.title || void 0,\n          src: bt(t.target)\n        })\n      },\n      link: {\n        i: mt(ut),\n        l: Mt.LOW,\n        _: (t, e, n) => ({\n          content: $t(e, t[1], n),\n          target: vt(t[2]),\n          title: t[3]\n        }),\n        p: (t, e, n) => U(\"a\", {\n          key: n.g,\n          href: bt(t.target),\n          title: t.title\n        }, e(t.content, n))\n      },\n      linkAngleBraceStyleDetector: {\n        i: mt(O),\n        l: Mt.MAX,\n        _: t => ({\n          content: [{\n            content: t[1],\n            type: \"text\"\n          }],\n          target: t[1],\n          type: \"link\"\n        })\n      },\n      linkBareUrlDetector: {\n        i: (t, e) => e.m ? null : mt(I)(t, e),\n        l: Mt.MAX,\n        _: t => ({\n          content: [{\n            content: t[1],\n            type: \"text\"\n          }],\n          target: t[1],\n          title: void 0,\n          type: \"link\"\n        })\n      },\n      linkMailtoDetector: {\n        i: mt(M),\n        l: Mt.MAX,\n        _(t) {\n          let e = t[1],\n            n = t[1];\n          return u.test(n) || (n = \"mailto:\" + n), {\n            content: [{\n              content: e.replace(\"mailto:\", \"\"),\n              type: \"text\"\n            }],\n            target: n,\n            type: \"link\"\n          };\n        }\n      },\n      list: {\n        i(t, e, n) {\n          const r = L.exec(n);\n          return !r || !e.h && e.o ? null : ct.exec(t = r[1] + t);\n        },\n        l: Mt.HIGH,\n        _(t, e, n) {\n          const r = t[2],\n            o = r.length > 1,\n            c = o ? +r : void 0,\n            a = t[0].replace(i, \"\\n\").match(ot);\n          let u = !1;\n          return {\n            items: a.map(function (t, r) {\n              const o = rt.exec(t)[0].length,\n                c = new RegExp(\"^ {1,\" + o + \"}\", \"gm\"),\n                i = t.replace(c, \"\").replace(rt, \"\"),\n                l = r === a.length - 1,\n                s = -1 !== i.indexOf(\"\\n\\n\") || l && u;\n              u = s;\n              const _ = n.o,\n                f = n.h;\n              let d;\n              n.h = !0, s ? (n.o = !1, d = i.replace(B, \"\\n\\n\")) : (n.o = !0, d = i.replace(B, \"\"));\n              const p = e(d, n);\n              return n.o = _, n.h = f, p;\n            }),\n            ordered: o,\n            start: c\n          };\n        },\n        p: (t, e, n) => U(t.ordered ? \"ol\" : \"ul\", {\n          key: n.g,\n          start: t.start\n        }, t.items.map(function (t, r) {\n          return U(\"li\", {\n            key: r\n          }, e(t, n));\n        }))\n      },\n      newlineCoalescer: {\n        i: ht(m),\n        l: Mt.LOW,\n        _: Et,\n        p: () => \"\\n\"\n      },\n      paragraph: {\n        i: xt,\n        l: Mt.LOW,\n        _: zt,\n        p: (t, e, n) => U(\"p\", {\n          key: n.g\n        }, e(t.content, n))\n      },\n      ref: {\n        i: mt(C),\n        l: Mt.MAX,\n        _: t => (at[t[1]] = {\n          target: t[2],\n          title: t[4]\n        }, {}),\n        p: At\n      },\n      refImage: {\n        i: yt(D),\n        l: Mt.MAX,\n        _: t => ({\n          alt: t[1] || void 0,\n          ref: t[2]\n        }),\n        p: (t, e, n) => U(\"img\", {\n          key: n.g,\n          alt: t.alt,\n          src: bt(at[t.ref].target),\n          title: at[t.ref].title\n        })\n      },\n      refLink: {\n        i: mt(N),\n        l: Mt.MAX,\n        _: (t, e, n) => ({\n          content: e(t[1], n),\n          fallbackContent: e(t[0].replace(Z, \"\\\\$1\"), n),\n          ref: t[2]\n        }),\n        p: (t, e, n) => at[t.ref] ? U(\"a\", {\n          key: n.g,\n          href: bt(at[t.ref].target),\n          title: at[t.ref].title\n        }, e(t.content, n)) : U(\"span\", {\n          key: n.g\n        }, e(t.fallbackContent, n))\n      },\n      table: {\n        i: ht(j),\n        l: Mt.HIGH,\n        _: pt,\n        p: (t, e, n) => U(\"table\", {\n          key: n.g\n        }, U(\"thead\", null, U(\"tr\", null, t.header.map(function (r, o) {\n          return U(\"th\", {\n            key: o,\n            style: gt(t, o)\n          }, e(r, n));\n        }))), U(\"tbody\", null, t.cells.map(function (r, o) {\n          return U(\"tr\", {\n            key: o\n          }, r.map(function (r, o) {\n            return U(\"td\", {\n              key: o,\n              style: gt(t, o)\n            }, e(r, n));\n          }));\n        })))\n      },\n      tableSeparator: {\n        i: function (t, e) {\n          return e.t ? G.exec(t) : null;\n        },\n        l: Mt.HIGH,\n        _: function () {\n          return {\n            type: \"tableSeparator\"\n          };\n        },\n        p: () => \" | \"\n      },\n      text: {\n        i: kt(Y),\n        l: Mt.MIN,\n        _: t => ({\n          content: t[0].replace(w, (t, e) => H.namedCodesToUnicode[e] ? H.namedCodesToUnicode[e] : t)\n        }),\n        p: t => t.content\n      },\n      textBolded: {\n        i: yt(Q),\n        l: Mt.MED,\n        _: (t, e, n) => ({\n          content: e(t[2], n)\n        }),\n        p: (t, e, n) => U(\"strong\", {\n          key: n.g\n        }, e(t.content, n))\n      },\n      textEmphasized: {\n        i: yt(X),\n        l: Mt.LOW,\n        _: (t, e, n) => ({\n          content: e(t[2], n)\n        }),\n        p: (t, e, n) => U(\"em\", {\n          key: n.g\n        }, e(t.content, n))\n      },\n      textEscaped: {\n        i: yt(K),\n        l: Mt.HIGH,\n        _: t => ({\n          content: t[1],\n          type: \"text\"\n        })\n      },\n      textStrikethroughed: {\n        i: yt(J),\n        l: Mt.LOW,\n        _: zt,\n        p: (t, e, n) => U(\"del\", {\n          key: n.g\n        }, e(t.content, n))\n      }\n    };\n  !0 !== H.disableParsingRawHTML && (lt.htmlBlock = {\n    i: kt($),\n    l: Mt.HIGH,\n    _(t, e, n) {\n      const [, r] = t[3].match(et),\n        o = new RegExp(`^${r}`, \"gm\"),\n        a = t[3].replace(o, \"\"),\n        u = (i = a, st.some(t => t.test(i)) ? wt : St);\n      var i;\n      const l = t[1].toLowerCase(),\n        s = -1 !== c.indexOf(l);\n      n.m = n.m || \"a\" === l;\n      const _ = s ? t[3] : u(e, a, n);\n      return n.m = !1, {\n        attrs: W(t[2]),\n        content: _,\n        noInnerParse: s,\n        tag: s ? l : t[1]\n      };\n    },\n    p: (t, n, r) => U(t.tag, e({\n      key: r.g\n    }, t.attrs), t.noInnerParse ? t.content : n(t.content, r))\n  }, lt.htmlSelfClosing = {\n    i: kt(A),\n    l: Mt.HIGH,\n    _: t => ({\n      attrs: W(t[2] || \"\"),\n      tag: t[1]\n    }),\n    p: (t, n, r) => U(t.tag, e({}, t.attrs, {\n      key: r.g\n    }))\n  });\n  const ft = function (t) {\n      let e = Object.keys(t);\n      function n(r, o) {\n        let c = [],\n          a = \"\";\n        for (; r;) {\n          let u = 0;\n          for (; u < e.length;) {\n            const i = e[u],\n              l = t[i],\n              s = l.i(r, o, a);\n            if (s) {\n              const t = s[0];\n              r = r.substring(t.length);\n              const e = l._(s, n, o);\n              null == e.type && (e.type = i), c.push(e), a = t;\n              break;\n            }\n            u++;\n          }\n        }\n        return c;\n      }\n      return e.sort(function (e, n) {\n        let r = t[e].l,\n          o = t[n].l;\n        return r !== o ? r - o : e < n ? -1 : 1;\n      }), function (t, e) {\n        return n(function (t) {\n          return t.replace(y, \"\\n\").replace(x, \"\").replace(P, \"    \");\n        }(t), e);\n      };\n    }(lt),\n    dt = (Ot = function (t) {\n      return function (e, n, r) {\n        return t[e.type].p(e, n, r);\n      };\n    }(lt), function t(e, n = {}) {\n      if (Array.isArray(e)) {\n        const r = n.g,\n          o = [];\n        let c = !1;\n        for (let r = 0; r < e.length; r++) {\n          n.g = r;\n          const a = t(e[r], n),\n            u = \"string\" == typeof a;\n          u && c ? o[o.length - 1] += a : null !== a && o.push(a), c = u;\n        }\n        return n.g = r, o;\n      }\n      return Ot(e, t, n);\n    });\n  var Ot;\n  const Bt = V(n);\n  return nt.length ? U(\"div\", null, Bt, U(\"footer\", {\n    key: \"footer\"\n  }, nt.map(function (t) {\n    return U(\"div\", {\n      id: H.slugify(t.identifier),\n      key: t.identifier\n    }, t.identifier, dt(ft(t.footnote, {\n      o: !0\n    })));\n  }))) : Bt;\n}\n!function (t) {\n  t[t.MAX = 0] = \"MAX\", t[t.HIGH = 1] = \"HIGH\", t[t.MED = 2] = \"MED\", t[t.LOW = 3] = \"LOW\", t[t.MIN = 4] = \"MIN\";\n}(Mt || (Mt = {}));\nexport default (e => {\n  let {\n      children: r,\n      options: o\n    } = e,\n    c = function (t, e) {\n      if (null == t) return {};\n      var n,\n        r,\n        o = {},\n        c = Object.keys(t);\n      for (r = 0; r < c.length; r++) e.indexOf(n = c[r]) >= 0 || (o[n] = t[n]);\n      return o;\n    }(e, n);\n  return t.cloneElement(Ot(r, o), c);\n});\nexport { Ot as compiler };","map":{"version":3,"names":["r","reduce","t","e","toLowerCase","for","o","amp","apos","gt","lt","nbsp","quot","c","a","u","i","l","s","_","f","d","p","g","m","y","h","k","x","b","v","S","$","w","z","E","A","R","I","M","O","B","L","T","j","C","D","N","Z","F","P","G","H","q","U","V","W","Q","X","J","K","Y","tt","et","nt","rt","RegExp","ot","ct","at","ut","it","st","_t","replace","ft","test","dt","n","trim","forEach","type","length","push","content","pt","split","map","align","cells","header","textAlign","mt","exec","yt","ht","kt","xt","endsWith","every","some","trimEnd","bt","decodeURIComponent","match","vt","St","$t","wt","zt","parseCaptureInline","Et","At","Rt","filter","Boolean","join","It","shift","Mt","Ot","overrides","slugify","namedCodesToUnicode","createElement","className","forceInline","forceBlock","pop","wrapper","forceWrapper","key","indexOf","toUpperCase","slice","cloneElement","blockQuote","HIGH","_parse","_react","breakLine","breakThematic","codeBlock","MAX","lang","codeFenced","codeInline","LOW","footnote","identifier","footnoteReference","target","href","gfmTask","completed","checked","readOnly","heading","id","level","tag","headingSetext","htmlComment","image","alt","title","src","link","linkAngleBraceStyleDetector","linkBareUrlDetector","_match","linkMailtoDetector","list","items","ordered","start","newlineCoalescer","paragraph","ref","refImage","refLink","fallbackContent","table","style","tableSeparator","text","MIN","textBolded","MED","textEmphasized","textEscaped","textStrikethroughed","disableParsingRawHTML","htmlBlock","attrs","noInnerParse","htmlSelfClosing","Object","keys","substring","sort","Array","isArray","Bt","children","options","compiler"],"sources":["/Users/nish/Documents/portfolio/node_modules/markdown-to-jsx/index.tsx"],"sourcesContent":["/* @jsx h */\n/**\n * markdown-to-jsx is a fork of [simple-markdown v0.2.2](https://github.com/Khan/simple-markdown)\n * from Khan Academy. Thank you Khan devs for making such an awesome and extensible\n * parsing infra... without it, half of the optimizations here wouldn't be feasible. 🙏🏼\n */\nimport * as React from 'react'\n\nexport namespace MarkdownToJSX {\n  /**\n   * RequireAtLeastOne<{ ... }> <- only requires at least one key\n   */\n  type RequireAtLeastOne<T, Keys extends keyof T = keyof T> = Pick<\n    T,\n    Exclude<keyof T, Keys>\n  > &\n    {\n      [K in Keys]-?: Required<Pick<T, K>> & Partial<Pick<T, Exclude<Keys, K>>>\n    }[Keys]\n\n  export type CreateElement = typeof React.createElement\n\n  export type HTMLTags = keyof JSX.IntrinsicElements\n\n  export type State = {\n    _inAnchor?: boolean\n    _inline?: boolean\n    _inTable?: boolean\n    _key?: React.Key\n    _list?: boolean\n    _simple?: boolean\n  }\n\n  export type ParserResult = {\n    [key: string]: any\n    type?: string\n  }\n\n  export type NestedParser = (\n    input: string,\n    state?: MarkdownToJSX.State\n  ) => MarkdownToJSX.ParserResult\n\n  export type Parser<ParserOutput> = (\n    capture: RegExpMatchArray,\n    nestedParse: NestedParser,\n    state?: MarkdownToJSX.State\n  ) => ParserOutput\n\n  export type RuleOutput = (\n    ast: MarkdownToJSX.ParserResult,\n    state: MarkdownToJSX.State\n  ) => JSX.Element\n\n  export type Rule<ParserOutput = MarkdownToJSX.ParserResult> = {\n    _match: (\n      source: string,\n      state: MarkdownToJSX.State,\n      prevCapturedString?: string\n    ) => RegExpMatchArray\n    _order: Priority\n    _parse: MarkdownToJSX.Parser<ParserOutput>\n    _react?: (\n      node: ParserOutput,\n      output: RuleOutput,\n      state?: MarkdownToJSX.State\n    ) => React.ReactChild\n  }\n\n  export type Rules = {\n    [key: string]: Rule\n  }\n\n  export type Override =\n    | RequireAtLeastOne<{\n        component: React.ElementType\n        props: Object\n      }>\n    | React.ElementType\n\n  export type Overrides = {\n    [tag in HTMLTags]?: Override\n  } & {\n    [customComponent: string]: Override\n  }\n\n  export type Options = Partial<{\n    /**\n     * Ultimate control over the output of all rendered JSX.\n     */\n    createElement: (\n      tag: Parameters<CreateElement>[0],\n      props: React.Props<any>,\n      ...children: React.ReactChild[]\n    ) => JSX.Element\n\n    /**\n     * Disable the compiler's best-effort transcription of provided raw HTML\n     * into JSX-equivalent. This is the functionality that prevents the need to\n     * use `dangerouslySetInnerHTML` in React.\n     */\n    disableParsingRawHTML: boolean\n\n    /**\n     * Forces the compiler to always output content with a block-level wrapper\n     * (`<p>` or any block-level syntax your markdown already contains.)\n     */\n    forceBlock: boolean\n\n    /**\n     * Forces the compiler to always output content with an inline wrapper (`<span>`)\n     */\n    forceInline: boolean\n\n    /**\n     * Supply additional HTML entity: unicode replacement mappings.\n     *\n     * Pass only the inner part of the entity as the key,\n     * e.g. `&le;` -> `{ \"le\": \"\\u2264\" }`\n     *\n     * By default\n     * the following entites are replaced with their unicode equivalents:\n     *\n     * ```\n     * &amp;\n     * &apos;\n     * &gt;\n     * &lt;\n     * &nbsp;\n     * &quot;\n     * ```\n     */\n    namedCodesToUnicode: {\n      [key: string]: string\n    }\n\n    /**\n     * Selectively control the output of particular HTML tags as they would be\n     * emitted by the compiler.\n     */\n    overrides: Overrides\n\n    /**\n     * Declare the type of the wrapper to be used when there are multiple\n     * children to render. Set to `null` to get an array of children back\n     * without any wrapper, or use `React.Fragment` to get a React element\n     * that won't show up in the DOM.\n     */\n    wrapper: React.ElementType | null\n\n    /**\n     * Forces the compiler to wrap results, even if there is only a single\n     * child or no children.\n     */\n    forceWrapper: boolean\n\n    /**\n     * Override normalization of non-URI-safe characters for use in generating\n     * HTML IDs for anchor linking purposes.\n     */\n    slugify: (source: string) => string\n  }>\n}\n\n/** TODO: Drop for React 16? */\nconst ATTRIBUTE_TO_JSX_PROP_MAP = [\n  'allowFullScreen',\n  'allowTransparency',\n  'autoComplete',\n  'autoFocus',\n  'autoPlay',\n  'cellPadding',\n  'cellSpacing',\n  'charSet',\n  'className',\n  'classId',\n  'colSpan',\n  'contentEditable',\n  'contextMenu',\n  'crossOrigin',\n  'encType',\n  'formAction',\n  'formEncType',\n  'formMethod',\n  'formNoValidate',\n  'formTarget',\n  'frameBorder',\n  'hrefLang',\n  'inputMode',\n  'keyParams',\n  'keyType',\n  'marginHeight',\n  'marginWidth',\n  'maxLength',\n  'mediaGroup',\n  'minLength',\n  'noValidate',\n  'radioGroup',\n  'readOnly',\n  'rowSpan',\n  'spellCheck',\n  'srcDoc',\n  'srcLang',\n  'srcSet',\n  'tabIndex',\n  'useMap',\n].reduce((obj, x) => ((obj[x.toLowerCase()] = x), obj), { for: 'htmlFor' })\n\nconst namedCodesToUnicode = {\n  amp: '\\u0026',\n  apos: '\\u0027',\n  gt: '\\u003e',\n  lt: '\\u003c',\n  nbsp: '\\u00a0',\n  quot: '\\u201c',\n} as const\n\nconst DO_NOT_PROCESS_HTML_ELEMENTS = ['style', 'script']\n\n/**\n * the attribute extractor regex looks for a valid attribute name,\n * followed by an equal sign (whitespace around the equal sign is allowed), followed\n * by one of the following:\n *\n * 1. a single quote-bounded string, e.g. 'foo'\n * 2. a double quote-bounded string, e.g. \"bar\"\n * 3. an interpolation, e.g. {something}\n *\n * JSX can be be interpolated into itself and is passed through the compiler using\n * the same options and setup as the current run.\n *\n * <Something children={<SomeOtherThing />} />\n *                      ==================\n *                              ↳ children: [<SomeOtherThing />]\n *\n * Otherwise, interpolations are handled as strings or simple booleans\n * unless HTML syntax is detected.\n *\n * <Something color={green} disabled={true} />\n *                   =====            ====\n *                     ↓                ↳ disabled: true\n *                     ↳ color: \"green\"\n *\n * Numbers are not parsed at this time due to complexities around int, float,\n * and the upcoming bigint functionality that would make handling it unwieldy.\n * Parse the string in your component as desired.\n *\n * <Something someBigNumber={123456789123456789} />\n *                           ==================\n *                                   ↳ someBigNumber: \"123456789123456789\"\n */\nconst ATTR_EXTRACTOR_R =\n  /([-A-Z0-9_:]+)(?:\\s*=\\s*(?:(?:\"((?:\\\\.|[^\"])*)\")|(?:'((?:\\\\.|[^'])*)')|(?:\\{((?:\\\\.|{[^}]*?}|[^}])*)\\})))?/gi\n\n/** TODO: Write explainers for each of these */\n\nconst AUTOLINK_MAILTO_CHECK_R = /mailto:/i\nconst BLOCK_END_R = /\\n{2,}$/\nconst BLOCKQUOTE_R = /^( *>[^\\n]+(\\n[^\\n]+)*\\n*)+\\n{2,}/\nconst BLOCKQUOTE_TRIM_LEFT_MULTILINE_R = /^ *> ?/gm\nconst BREAK_LINE_R = /^ {2,}\\n/\nconst BREAK_THEMATIC_R = /^(?:( *[-*_]) *){3,}(?:\\n *)+\\n/\nconst CODE_BLOCK_FENCED_R =\n  /^\\s*(`{3,}|~{3,}) *(\\S+)? *\\n([\\s\\S]+?)\\s*\\1 *(?:\\n *)+\\n?/\nconst CODE_BLOCK_R = /^(?: {4}[^\\n]+\\n*)+(?:\\n *)+\\n?/\nconst CODE_INLINE_R = /^(`+)\\s*([\\s\\S]*?[^`])\\s*\\1(?!`)/\nconst CONSECUTIVE_NEWLINE_R = /^(?:\\n *)*\\n/\nconst CR_NEWLINE_R = /\\r\\n?/g\nconst FOOTNOTE_R = /^\\[\\^([^\\]]+)](:.*)\\n/\nconst FOOTNOTE_REFERENCE_R = /^\\[\\^([^\\]]+)]/\nconst FORMFEED_R = /\\f/g\nconst GFM_TASK_R = /^\\s*?\\[(x|\\s)\\]/\nconst HEADING_R = /^ *(#{1,6}) *([^\\n]+?)(?: +#*)?(?:\\n *)*(?:\\n|$)/\nconst HEADING_SETEXT_R = /^([^\\n]+)\\n *(=|-){3,} *(?:\\n *)+\\n/\n\n/**\n * Explanation:\n *\n * 1. Look for a starting tag, preceeded by any amount of spaces\n *    ^ *<\n *\n * 2. Capture the tag name (capture 1)\n *    ([^ >/]+)\n *\n * 3. Ignore a space after the starting tag and capture the attribute portion of the tag (capture 2)\n *     ?([^>]*)\\/{0}>\n *\n * 4. Ensure a matching closing tag is present in the rest of the input string\n *    (?=[\\s\\S]*<\\/\\1>)\n *\n * 5. Capture everything until the matching closing tag -- this might include additional pairs\n *    of the same tag type found in step 2 (capture 3)\n *    ((?:[\\s\\S]*?(?:<\\1[^>]*>[\\s\\S]*?<\\/\\1>)*[\\s\\S]*?)*?)<\\/\\1>\n *\n * 6. Capture excess newlines afterward\n *    \\n*\n */\nconst HTML_BLOCK_ELEMENT_R =\n  /^ *(?!<[a-z][^ >/]* ?\\/>)<([a-z][^ >/]*) ?([^>]*)\\/{0}>\\n?(\\s*(?:<\\1[^>]*?>[\\s\\S]*?<\\/\\1>|(?!<\\1)[\\s\\S])*?)<\\/\\1>\\n*/i\n\nconst HTML_CHAR_CODE_R = /&([a-z]+);/g\n\nconst HTML_COMMENT_R = /^<!--[\\s\\S]*?(?:-->)/\n\n/**\n * borrowed from React 15(https://github.com/facebook/react/blob/894d20744cba99383ffd847dbd5b6e0800355a5c/src/renderers/dom/shared/HTMLDOMPropertyConfig.js)\n */\nconst HTML_CUSTOM_ATTR_R = /^(data|aria|x)-[a-z_][a-z\\d_.-]*$/\n\nconst HTML_SELF_CLOSING_ELEMENT_R =\n  /^ *<([a-z][a-z0-9:]*)(?:\\s+((?:<.*?>|[^>])*))?\\/?>(?!<\\/\\1>)(\\s*\\n)?/i\nconst INTERPOLATION_R = /^\\{.*\\}$/\nconst LINK_AUTOLINK_BARE_URL_R = /^(https?:\\/\\/[^\\s<]+[^<.,:;\"')\\]\\s])/\nconst LINK_AUTOLINK_MAILTO_R = /^<([^ >]+@[^ >]+)>/\nconst LINK_AUTOLINK_R = /^<([^ >]+:\\/[^ >]+)>/\nconst LIST_ITEM_END_R = / *\\n+$/\nconst LIST_LOOKBEHIND_R = /(?:^|\\n)( *)$/\nconst CAPTURE_LETTER_AFTER_HYPHEN = /-([a-z])?/gi\nconst NP_TABLE_R = /^(.*\\|?.*)\\n *(\\|? *[-:]+ *\\|[-| :]*)\\n((?:.*\\|.*\\n)*)\\n?/\nconst PARAGRAPH_R = /^[^\\n]+(?:  \\n|\\n{2,})/\nconst REFERENCE_IMAGE_OR_LINK = /^\\[([^\\]]*)\\]:\\s*(\\S+)\\s*(\"([^\"]*)\")?/\nconst REFERENCE_IMAGE_R = /^!\\[([^\\]]*)\\] ?\\[([^\\]]*)\\]/\nconst REFERENCE_LINK_R = /^\\[([^\\]]*)\\] ?\\[([^\\]]*)\\]/\nconst SQUARE_BRACKETS_R = /(\\[|\\])/g\nconst SHOULD_RENDER_AS_BLOCK_R = /(\\n|^[-*]\\s|^#|^ {2,}|^-{2,}|^>\\s)/\nconst TAB_R = /\\t/g\nconst TABLE_SEPARATOR_R = /^ *\\| */\nconst TABLE_TRIM_PIPES = /(^ *\\||\\| *$)/g\nconst TABLE_CELL_END_TRIM = / *$/\nconst TABLE_CENTER_ALIGN = /^ *:-+: *$/\nconst TABLE_LEFT_ALIGN = /^ *:-+ *$/\nconst TABLE_RIGHT_ALIGN = /^ *-+: *$/\n\nconst TEXT_BOLD_R =\n  /^([*_])\\1((?:\\[.*?\\][([].*?[)\\]]|<.*?>(?:.*?<.*?>)?|`.*?`|~+.*?~+|.)*?)\\1\\1(?!\\1)/\nconst TEXT_EMPHASIZED_R =\n  /^([*_])((?:\\[.*?\\][([].*?[)\\]]|<.*?>(?:.*?<.*?>)?|`.*?`|~+.*?~+|.)*?)\\1(?!\\1|\\w)/\nconst TEXT_STRIKETHROUGHED_R = /^~~((?:\\[.*?\\]|<.*?>(?:.*?<.*?>)?|`.*?`|.)*?)~~/\n\nconst TEXT_ESCAPED_R = /^\\\\([^0-9A-Za-z\\s])/\nconst TEXT_PLAIN_R =\n  /^[\\s\\S]+?(?=[^0-9A-Z\\s\\u00c0-\\uffff&;.()'\"]|\\d+\\.|\\n\\n| {2,}\\n|\\w+:\\S|$)/i\n\nconst TRIM_STARTING_NEWLINES = /^\\n+/\n\nconst HTML_LEFT_TRIM_AMOUNT_R = /^([ \\t]*)/\n\nconst UNESCAPE_URL_R = /\\\\([^0-9A-Z\\s])/gi\n\n// recognize a `*` `-`, `+`, `1.`, `2.`... list bullet\nconst LIST_BULLET = '(?:[*+-]|\\\\d+\\\\.)'\n\n// recognize the start of a list item:\n// leading space plus a bullet plus a space (`   * `)\nconst LIST_ITEM_PREFIX = '( *)(' + LIST_BULLET + ') +'\nconst LIST_ITEM_PREFIX_R = new RegExp('^' + LIST_ITEM_PREFIX)\n\n// recognize an individual list item:\n//  * hi\n//    this is part of the same item\n//\n//    as is this, which is a new paragraph in the same item\n//\n//  * but this is not part of the same item\nconst LIST_ITEM_R = new RegExp(\n  '^' +\n    LIST_ITEM_PREFIX +\n    '[^\\\\n]*(?:\\\\n' +\n    '(?!\\\\1' +\n    LIST_BULLET +\n    ' )[^\\\\n]*)*(\\\\n|$)',\n  'gm'\n)\n\n// check whether a list item has paragraphs: if it does,\n// we leave the newlines at the end\nconst LIST_R = new RegExp(\n  '^( *)(' +\n    LIST_BULLET +\n    ') ' +\n    '[\\\\s\\\\S]+?(?:\\\\n{2,}(?! )' +\n    '(?!\\\\1' +\n    LIST_BULLET +\n    ' (?!' +\n    LIST_BULLET +\n    ' ))\\\\n*' +\n    // the \\\\s*$ here is so that we can parse the inside of nested\n    // lists, where our content might end before we receive two `\\n`s\n    '|\\\\s*\\\\n*$)'\n)\n\nconst LINK_INSIDE = '(?:\\\\[[^\\\\]]*\\\\]|[^\\\\[\\\\]]|\\\\](?=[^\\\\[]*\\\\]))*'\nconst LINK_HREF_AND_TITLE =\n  '\\\\s*<?((?:[^\\\\s\\\\\\\\]|\\\\\\\\.)*?)>?(?:\\\\s+[\\'\"]([\\\\s\\\\S]*?)[\\'\"])?\\\\s*'\n\nconst LINK_R = new RegExp(\n  '^\\\\[(' + LINK_INSIDE + ')\\\\]\\\\(' + LINK_HREF_AND_TITLE + '\\\\)'\n)\n\nconst IMAGE_R = new RegExp(\n  '^!\\\\[(' + LINK_INSIDE + ')\\\\]\\\\(' + LINK_HREF_AND_TITLE + '\\\\)'\n)\n\nconst NON_PARAGRAPH_BLOCK_SYNTAXES = [\n  BLOCKQUOTE_R,\n  CODE_BLOCK_R,\n  CODE_BLOCK_FENCED_R,\n  HEADING_R,\n  HEADING_SETEXT_R,\n  HTML_COMMENT_R,\n  LIST_ITEM_R,\n  LIST_R,\n  NP_TABLE_R,\n]\n\nconst BLOCK_SYNTAXES = [\n  ...NON_PARAGRAPH_BLOCK_SYNTAXES,\n  PARAGRAPH_R,\n  HTML_BLOCK_ELEMENT_R,\n  HTML_SELF_CLOSING_ELEMENT_R,\n]\n\nfunction containsBlockSyntax(input: string) {\n  return BLOCK_SYNTAXES.some(r => r.test(input))\n}\n\n/** Remove symmetrical leading and trailing quotes */\nfunction unquote(str: string) {\n  const first = str[0]\n  if (\n    (first === '\"' || first === \"'\") &&\n    str.length >= 2 &&\n    str[str.length - 1] === first\n  ) {\n    return str.slice(1, -1)\n  }\n  return str\n}\n\n// based on https://stackoverflow.com/a/18123682/1141611\n// not complete, but probably good enough\nfunction slugify(str: string) {\n  return str\n    .replace(/[ÀÁÂÃÄÅàáâãäåæÆ]/g, 'a')\n    .replace(/[çÇ]/g, 'c')\n    .replace(/[ðÐ]/g, 'd')\n    .replace(/[ÈÉÊËéèêë]/g, 'e')\n    .replace(/[ÏïÎîÍíÌì]/g, 'i')\n    .replace(/[Ññ]/g, 'n')\n    .replace(/[øØœŒÕõÔôÓóÒò]/g, 'o')\n    .replace(/[ÜüÛûÚúÙù]/g, 'u')\n    .replace(/[ŸÿÝý]/g, 'y')\n    .replace(/[^a-z0-9- ]/gi, '')\n    .replace(/ /gi, '-')\n    .toLowerCase()\n}\n\nfunction parseTableAlignCapture(alignCapture: string) {\n  if (TABLE_RIGHT_ALIGN.test(alignCapture)) {\n    return 'right'\n  } else if (TABLE_CENTER_ALIGN.test(alignCapture)) {\n    return 'center'\n  } else if (TABLE_LEFT_ALIGN.test(alignCapture)) {\n    return 'left'\n  }\n\n  return null\n}\n\nfunction parseTableRow(\n  source: string,\n  parse: MarkdownToJSX.NestedParser,\n  state: MarkdownToJSX.State\n) {\n  const prevInTable = state._inTable\n  state._inTable = true\n  const tableRow = parse(source.trim(), state)\n  state._inTable = prevInTable\n\n  let cells = [[]]\n  tableRow.forEach(function (node, i) {\n    if (node.type === 'tableSeparator') {\n      // Filter out empty table separators at the start/end:\n      if (i !== 0 && i !== tableRow.length - 1) {\n        // Split the current row:\n        cells.push([])\n      }\n    } else {\n      if (\n        node.type === 'text' &&\n        (tableRow[i + 1] == null || tableRow[i + 1].type === 'tableSeparator')\n      ) {\n        node.content = node.content.replace(TABLE_CELL_END_TRIM, '')\n      }\n      cells[cells.length - 1].push(node)\n    }\n  })\n  return cells\n}\n\nfunction parseTableAlign(source: string /*, parse, state*/) {\n  const alignText = source.replace(TABLE_TRIM_PIPES, '').split('|')\n\n  return alignText.map(parseTableAlignCapture)\n}\n\nfunction parseTableCells(\n  source: string,\n  parse: MarkdownToJSX.NestedParser,\n  state: MarkdownToJSX.State\n) {\n  const rowsText = source.trim().split('\\n')\n\n  return rowsText.map(function (rowText) {\n    return parseTableRow(rowText, parse, state)\n  })\n}\n\nfunction parseTable(\n  capture: RegExpMatchArray,\n  parse: MarkdownToJSX.NestedParser,\n  state: MarkdownToJSX.State\n) {\n  state._inline = true\n  const header = parseTableRow(capture[1], parse, state)\n  const align = parseTableAlign(capture[2])\n  const cells = parseTableCells(capture[3], parse, state)\n  state._inline = false\n\n  return {\n    align: align,\n    cells: cells,\n    header: header,\n    type: 'table',\n  }\n}\n\nfunction getTableStyle(node, colIndex) {\n  return node.align[colIndex] == null\n    ? {}\n    : {\n        textAlign: node.align[colIndex],\n      }\n}\n\n/** TODO: remove for react 16 */\nfunction normalizeAttributeKey(key) {\n  const hyphenIndex = key.indexOf('-')\n\n  if (hyphenIndex !== -1 && key.match(HTML_CUSTOM_ATTR_R) === null) {\n    key = key.replace(CAPTURE_LETTER_AFTER_HYPHEN, function (_, letter) {\n      return letter.toUpperCase()\n    })\n  }\n\n  return key\n}\n\nfunction attributeValueToJSXPropValue(\n  key: JSX.IntrinsicAttributes,\n  value: string\n): any {\n  if (key === 'style') {\n    return value.split(/;\\s?/).reduce(function (styles, kvPair) {\n      const key = kvPair.slice(0, kvPair.indexOf(':'))\n\n      // snake-case to camelCase\n      // also handles PascalCasing vendor prefixes\n      const camelCasedKey = key.replace(/(-[a-z])/g, substr =>\n        substr[1].toUpperCase()\n      )\n\n      // key.length + 1 to skip over the colon\n      styles[camelCasedKey] = kvPair.slice(key.length + 1).trim()\n\n      return styles\n    }, {})\n  } else if (key === 'href') {\n    return sanitizeUrl(value)\n  } else if (value.match(INTERPOLATION_R)) {\n    // return as a string and let the consumer decide what to do with it\n    value = value.slice(1, value.length - 1)\n  }\n\n  if (value === 'true') {\n    return true\n  } else if (value === 'false') {\n    return false\n  }\n\n  return value\n}\n\nfunction normalizeWhitespace(source: string): string {\n  return source\n    .replace(CR_NEWLINE_R, '\\n')\n    .replace(FORMFEED_R, '')\n    .replace(TAB_R, '    ')\n}\n\n/**\n * Creates a parser for a given set of rules, with the precedence\n * specified as a list of rules.\n *\n * @rules: an object containing\n * rule type -> {match, order, parse} objects\n * (lower order is higher precedence)\n * (Note: `order` is added to defaultRules after creation so that\n *  the `order` of defaultRules in the source matches the `order`\n *  of defaultRules in terms of `order` fields.)\n *\n * @returns The resulting parse function, with the following parameters:\n *   @source: the input source string to be parsed\n *   @state: an optional object to be threaded through parse\n *     calls. Allows clients to add stateful operations to\n *     parsing, such as keeping track of how many levels deep\n *     some nesting is. For an example use-case, see passage-ref\n *     parsing in src/widgets/passage/passage-markdown.jsx\n */\nfunction parserFor(\n  rules: MarkdownToJSX.Rules\n): (\n  source: string,\n  state: MarkdownToJSX.State\n) => ReturnType<MarkdownToJSX.NestedParser> {\n  // Sorts rules in order of increasing order, then\n  // ascending rule name in case of ties.\n  let ruleList = Object.keys(rules)\n\n  /* istanbul ignore next */\n  if (process.env.NODE_ENV !== 'production') {\n    ruleList.forEach(function (type) {\n      let order = rules[type]._order\n      if (\n        process.env.NODE_ENV !== 'production' &&\n        (typeof order !== 'number' || !isFinite(order))\n      ) {\n        console.warn(\n          'markdown-to-jsx: Invalid order for rule `' + type + '`: ' + order\n        )\n      }\n    })\n  }\n\n  ruleList.sort(function (typeA, typeB) {\n    let orderA = rules[typeA]._order\n    let orderB = rules[typeB]._order\n\n    // First sort based on increasing order\n    if (orderA !== orderB) {\n      return orderA - orderB\n\n      // Then based on increasing unicode lexicographic ordering\n    } else if (typeA < typeB) {\n      return -1\n    }\n\n    return 1\n  })\n\n  function nestedParse(\n    source: string,\n    state: MarkdownToJSX.State\n  ): MarkdownToJSX.ParserResult[] {\n    let result = []\n\n    // We store the previous capture so that match functions can\n    // use some limited amount of lookbehind. Lists use this to\n    // ensure they don't match arbitrary '- ' or '* ' in inline\n    // text (see the list rule for more information).\n    let prevCapture = ''\n    while (source) {\n      let i = 0\n      while (i < ruleList.length) {\n        const ruleType = ruleList[i]\n        const rule = rules[ruleType]\n        const capture = rule._match(source, state, prevCapture)\n\n        if (capture) {\n          const currCaptureString = capture[0]\n          source = source.substring(currCaptureString.length)\n          const parsed = rule._parse(capture, nestedParse, state)\n\n          // We also let rules override the default type of\n          // their parsed node if they would like to, so that\n          // there can be a single output function for all links,\n          // even if there are several rules to parse them.\n          if (parsed.type == null) {\n            parsed.type = ruleType\n          }\n\n          result.push(parsed)\n\n          prevCapture = currCaptureString\n          break\n        }\n\n        i++\n      }\n    }\n\n    return result\n  }\n\n  return function outerParse(source, state) {\n    return nestedParse(normalizeWhitespace(source), state)\n  }\n}\n\n// Creates a match function for an inline scoped or simple element from a regex\nfunction inlineRegex(regex: RegExp) {\n  return function match(source, state: MarkdownToJSX.State) {\n    if (state._inline) {\n      return regex.exec(source)\n    } else {\n      return null\n    }\n  }\n}\n\n// basically any inline element except links\nfunction simpleInlineRegex(regex: RegExp) {\n  return function match(source: string, state: MarkdownToJSX.State) {\n    if (state._inline || state._simple) {\n      return regex.exec(source)\n    } else {\n      return null\n    }\n  }\n}\n\n// Creates a match function for a block scoped element from a regex\nfunction blockRegex(regex: RegExp) {\n  return function match(source: string, state: MarkdownToJSX.State) {\n    if (state._inline || state._simple) {\n      return null\n    } else {\n      return regex.exec(source)\n    }\n  }\n}\n\n// Creates a match function from a regex, ignoring block/inline scope\nfunction anyScopeRegex(regex: RegExp) {\n  return function match(source: string /*, state*/) {\n    return regex.exec(source)\n  }\n}\n\nfunction matchParagraph(\n  source: string,\n  state: MarkdownToJSX.State,\n  prevCapturedString?: string\n) {\n  if (state._inline || state._simple) {\n    return null\n  }\n\n  if (prevCapturedString && !prevCapturedString.endsWith('\\n')) {\n    // don't match continuation of a line\n    return null\n  }\n\n  let match = ''\n\n  source.split('\\n').every(line => {\n    // bail out on first sign of non-paragraph block\n    if (NON_PARAGRAPH_BLOCK_SYNTAXES.some(regex => regex.test(line))) {\n      return false\n    }\n    match += line + '\\n'\n    return line.trim()\n  })\n\n  const captured = match.trimEnd()\n  if (captured == '') {\n    return null\n  }\n\n  return [match, captured]\n}\n\nfunction reactFor(outputFunc) {\n  return function nestedReactOutput(\n    ast: MarkdownToJSX.ParserResult | MarkdownToJSX.ParserResult[],\n    state: MarkdownToJSX.State = {}\n  ): React.ReactChild[] {\n    if (Array.isArray(ast)) {\n      const oldKey = state._key\n      const result = []\n\n      // map nestedOutput over the ast, except group any text\n      // nodes together into a single string output.\n      let lastWasString = false\n\n      for (let i = 0; i < ast.length; i++) {\n        state._key = i\n\n        const nodeOut = nestedReactOutput(ast[i], state)\n        const isString = typeof nodeOut === 'string'\n\n        if (isString && lastWasString) {\n          result[result.length - 1] += nodeOut\n        } else if (nodeOut !== null) {\n          result.push(nodeOut)\n        }\n\n        lastWasString = isString\n      }\n\n      state._key = oldKey\n\n      return result\n    }\n\n    return outputFunc(ast, nestedReactOutput, state)\n  }\n}\n\nfunction sanitizeUrl(url: string): string | null {\n  try {\n    const decoded = decodeURIComponent(url).replace(/[^A-Za-z0-9/:]/g, '')\n\n    if (decoded.match(/^\\s*(javascript|vbscript|data):/i)) {\n      if (process.env.NODE_ENV !== 'production') {\n        console.warn(\n          'Anchor URL contains an unsafe JavaScript/VBScript/data expression, it will not be rendered.',\n          decoded\n        )\n      }\n\n      return null\n    }\n  } catch (e) {\n    if (process.env.NODE_ENV !== 'production') {\n      console.warn(\n        'Anchor URL could not be decoded due to malformed syntax or characters, it will not be rendered.',\n        url\n      )\n    }\n\n    // decodeURIComponent sometimes throws a URIError\n    // See `decodeURIComponent('a%AFc');`\n    // http://stackoverflow.com/questions/9064536/javascript-decodeuricomponent-malformed-uri-exception\n    return null\n  }\n\n  return url\n}\n\nfunction unescapeUrl(rawUrlString: string): string {\n  return rawUrlString.replace(UNESCAPE_URL_R, '$1')\n}\n\n/**\n * Everything inline, including links.\n */\nfunction parseInline(\n  parse: MarkdownToJSX.NestedParser,\n  content: string,\n  state: MarkdownToJSX.State\n): MarkdownToJSX.ParserResult {\n  const isCurrentlyInline = state._inline || false\n  const isCurrentlySimple = state._simple || false\n  state._inline = true\n  state._simple = true\n  const result = parse(content, state)\n  state._inline = isCurrentlyInline\n  state._simple = isCurrentlySimple\n  return result\n}\n\n/**\n * Anything inline that isn't a link.\n */\nfunction parseSimpleInline(\n  parse: MarkdownToJSX.NestedParser,\n  content: string,\n  state: MarkdownToJSX.State\n): MarkdownToJSX.ParserResult {\n  const isCurrentlyInline = state._inline || false\n  const isCurrentlySimple = state._simple || false\n  state._inline = false\n  state._simple = true\n  const result = parse(content, state)\n  state._inline = isCurrentlyInline\n  state._simple = isCurrentlySimple\n  return result\n}\n\nfunction parseBlock(\n  parse,\n  content,\n  state: MarkdownToJSX.State\n): MarkdownToJSX.ParserResult {\n  state._inline = false\n  return parse(content + '\\n\\n', state)\n}\n\nconst parseCaptureInline: MarkdownToJSX.Parser<ReturnType<typeof parseInline>> =\n  (capture, parse, state: MarkdownToJSX.State) => {\n    return {\n      content: parseInline(parse, capture[1], state),\n    }\n  }\n\nfunction captureNothing() {\n  return {}\n}\n\nfunction renderNothing() {\n  return null\n}\n\nfunction ruleOutput(rules: MarkdownToJSX.Rules) {\n  return function nestedRuleOutput(\n    ast: MarkdownToJSX.ParserResult,\n    outputFunc: MarkdownToJSX.RuleOutput,\n    state: MarkdownToJSX.State\n  ): React.ReactChild {\n    return rules[ast.type]._react(ast, outputFunc, state)\n  }\n}\n\nfunction cx(...args) {\n  return args.filter(Boolean).join(' ')\n}\n\nfunction get(src: Object, path: string, fb?: any) {\n  let ptr = src\n  const frags = path.split('.')\n\n  while (frags.length) {\n    ptr = ptr[frags[0]]\n\n    if (ptr === undefined) break\n    else frags.shift()\n  }\n\n  return ptr || fb\n}\n\nfunction getTag(tag: string, overrides: MarkdownToJSX.Overrides) {\n  const override = get(overrides, tag)\n\n  if (!override) return tag\n\n  return typeof override === 'function' ||\n    (typeof override === 'object' && 'render' in override)\n    ? override\n    : get(overrides, `${tag}.component`, tag)\n}\n\nenum Priority {\n  /**\n   * anything that must scan the tree before everything else\n   */\n  MAX,\n  /**\n   * scans for block-level constructs\n   */\n  HIGH,\n  /**\n   * inline w/ more priority than other inline\n   */\n  MED,\n  /**\n   * inline elements\n   */\n  LOW,\n  /**\n   * bare text and stuff that is considered leftovers\n   */\n  MIN,\n}\n\nexport function compiler(\n  markdown: string,\n  options: MarkdownToJSX.Options = {}\n) {\n  options.overrides = options.overrides || {}\n  options.slugify = options.slugify || slugify\n  options.namedCodesToUnicode = options.namedCodesToUnicode\n    ? { ...namedCodesToUnicode, ...options.namedCodesToUnicode }\n    : namedCodesToUnicode\n\n  const createElementFn = options.createElement || React.createElement\n\n  // eslint-disable-next-line no-unused-vars\n  function h(\n    // locally we always will render a known string tag\n    tag: MarkdownToJSX.HTMLTags,\n    props: Parameters<MarkdownToJSX.CreateElement>[1] & {\n      className?: string\n    },\n    ...children\n  ) {\n    const overrideProps = get(options.overrides, `${tag}.props`, {})\n\n    return createElementFn(\n      getTag(tag, options.overrides),\n      {\n        ...props,\n        ...overrideProps,\n        className: cx(props?.className, overrideProps.className) || undefined,\n      },\n      ...children\n    )\n  }\n\n  function compile(input: string): JSX.Element {\n    let _inline = false\n\n    if (options.forceInline) {\n      _inline = true\n    } else if (!options.forceBlock) {\n      /**\n       * should not contain any block-level markdown like newlines, lists, headings,\n       * thematic breaks, blockquotes, tables, etc\n       */\n      _inline = SHOULD_RENDER_AS_BLOCK_R.test(input) === false\n    }\n\n    const arr = emitter(\n      parser(\n        _inline\n          ? input\n          : `${input.trimEnd().replace(TRIM_STARTING_NEWLINES, '')}\\n\\n`,\n        {\n          _inline,\n        }\n      )\n    )\n\n    while (\n      typeof arr[arr.length - 1] === 'string' &&\n      !arr[arr.length - 1].trim()\n    ) {\n      arr.pop()\n    }\n\n    if (options.wrapper === null) {\n      return arr\n    }\n\n    const wrapper = options.wrapper || (_inline ? 'span' : 'div')\n    let jsx\n\n    if (arr.length > 1 || options.forceWrapper) {\n      jsx = arr\n    } else if (arr.length === 1) {\n      jsx = arr[0]\n\n      // TODO: remove this for React 16\n      if (typeof jsx === 'string') {\n        return <span key=\"outer\">{jsx}</span>\n      } else {\n        return jsx\n      }\n    } else {\n      // TODO: return null for React 16\n      jsx = null\n    }\n\n    return React.createElement(wrapper, { key: 'outer' }, jsx)\n  }\n\n  function attrStringToMap(str: string): React.Props<any> {\n    const attributes = str.match(ATTR_EXTRACTOR_R)\n\n    return attributes\n      ? attributes.reduce(function (map, raw, index) {\n          const delimiterIdx = raw.indexOf('=')\n\n          if (delimiterIdx !== -1) {\n            const key = normalizeAttributeKey(raw.slice(0, delimiterIdx)).trim()\n            const value = unquote(raw.slice(delimiterIdx + 1).trim())\n\n            const mappedKey = ATTRIBUTE_TO_JSX_PROP_MAP[key] || key\n            const normalizedValue = (map[mappedKey] =\n              attributeValueToJSXPropValue(key, value))\n\n            if (\n              typeof normalizedValue === 'string' &&\n              (HTML_BLOCK_ELEMENT_R.test(normalizedValue) ||\n                HTML_SELF_CLOSING_ELEMENT_R.test(normalizedValue))\n            ) {\n              map[mappedKey] = React.cloneElement(\n                compile(normalizedValue.trim()),\n                { key: index }\n              )\n            }\n          } else if (raw !== 'style') {\n            map[ATTRIBUTE_TO_JSX_PROP_MAP[raw] || raw] = true\n          }\n\n          return map\n        }, {})\n      : undefined\n  }\n\n  /* istanbul ignore next */\n  if (process.env.NODE_ENV !== 'production') {\n    if (typeof markdown !== 'string') {\n      throw new Error(`markdown-to-jsx: the first argument must be\n                             a string`)\n    }\n\n    if (\n      Object.prototype.toString.call(options.overrides) !== '[object Object]'\n    ) {\n      throw new Error(`markdown-to-jsx: options.overrides (second argument property) must be\n                             undefined or an object literal with shape:\n                             {\n                                htmltagname: {\n                                    component: string|ReactComponent(optional),\n                                    props: object(optional)\n                                }\n                             }`)\n    }\n  }\n\n  const footnotes: { footnote: string; identifier: string }[] = []\n  const refs: { [key: string]: { target: string; title: string } } = {}\n\n  /**\n   * each rule's react() output function goes through our custom h() JSX pragma;\n   * this allows the override functionality to be automatically applied\n   */\n  const rules: MarkdownToJSX.Rules = {\n    blockQuote: {\n      _match: blockRegex(BLOCKQUOTE_R),\n      _order: Priority.HIGH,\n      _parse(capture, parse, state) {\n        return {\n          content: parse(\n            capture[0].replace(BLOCKQUOTE_TRIM_LEFT_MULTILINE_R, ''),\n            state\n          ),\n        }\n      },\n      _react(node, output, state) {\n        return (\n          <blockquote key={state._key}>\n            {output(node.content, state)}\n          </blockquote>\n        )\n      },\n    } as MarkdownToJSX.Rule<{ content: MarkdownToJSX.ParserResult }>,\n\n    breakLine: {\n      _match: anyScopeRegex(BREAK_LINE_R),\n      _order: Priority.HIGH,\n      _parse: captureNothing,\n      _react(_, __, state) {\n        return <br key={state._key} />\n      },\n    },\n\n    breakThematic: {\n      _match: blockRegex(BREAK_THEMATIC_R),\n      _order: Priority.HIGH,\n      _parse: captureNothing,\n      _react(_, __, state) {\n        return <hr key={state._key} />\n      },\n    },\n\n    codeBlock: {\n      _match: blockRegex(CODE_BLOCK_R),\n      _order: Priority.MAX,\n      _parse(capture /*, parse, state*/) {\n        return {\n          content: capture[0].replace(/^ {4}/gm, '').replace(/\\n+$/, ''),\n          lang: undefined,\n        }\n      },\n\n      _react(node, output, state) {\n        return (\n          <pre key={state._key}>\n            <code className={node.lang ? `lang-${node.lang}` : ''}>\n              {node.content}\n            </code>\n          </pre>\n        )\n      },\n    } as MarkdownToJSX.Rule<{ content: string; lang?: string }>,\n\n    codeFenced: {\n      _match: blockRegex(CODE_BLOCK_FENCED_R),\n      _order: Priority.MAX,\n      _parse(capture /*, parse, state*/) {\n        return {\n          content: capture[3],\n          lang: capture[2] || undefined,\n          type: 'codeBlock',\n        }\n      },\n    },\n\n    codeInline: {\n      _match: simpleInlineRegex(CODE_INLINE_R),\n      _order: Priority.LOW,\n      _parse(capture /*, parse, state*/) {\n        return {\n          content: capture[2],\n        }\n      },\n      _react(node, output, state) {\n        return <code key={state._key}>{node.content}</code>\n      },\n    } as MarkdownToJSX.Rule<{ content: string }>,\n\n    /**\n     * footnotes are emitted at the end of compilation in a special <footer> block\n     */\n    footnote: {\n      _match: blockRegex(FOOTNOTE_R),\n      _order: Priority.MAX,\n      _parse(capture /*, parse, state*/) {\n        footnotes.push({\n          footnote: capture[2],\n          identifier: capture[1],\n        })\n\n        return {}\n      },\n      _react: renderNothing,\n    },\n\n    footnoteReference: {\n      _match: inlineRegex(FOOTNOTE_REFERENCE_R),\n      _order: Priority.HIGH,\n      _parse(capture /*, parse*/) {\n        return {\n          content: capture[1],\n          target: `#${options.slugify(capture[1])}`,\n        }\n      },\n      _react(node, output, state) {\n        return (\n          <a key={state._key} href={sanitizeUrl(node.target)}>\n            <sup key={state._key}>{node.content}</sup>\n          </a>\n        )\n      },\n    } as MarkdownToJSX.Rule<{ content: string; target: string }>,\n\n    gfmTask: {\n      _match: inlineRegex(GFM_TASK_R),\n      _order: Priority.HIGH,\n      _parse(capture /*, parse, state*/) {\n        return {\n          completed: capture[1].toLowerCase() === 'x',\n        }\n      },\n      _react(node, output, state) {\n        return (\n          <input\n            checked={node.completed}\n            key={state._key}\n            readOnly\n            type=\"checkbox\"\n          />\n        )\n      },\n    } as MarkdownToJSX.Rule<{ completed: boolean }>,\n\n    heading: {\n      _match: blockRegex(HEADING_R),\n      _order: Priority.HIGH,\n      _parse(capture, parse, state) {\n        return {\n          content: parseInline(parse, capture[2], state),\n          id: options.slugify(capture[2]),\n          level: capture[1].length,\n        }\n      },\n      _react(node, output, state) {\n        node.tag = `h${node.level}` as MarkdownToJSX.HTMLTags\n        return (\n          <node.tag id={node.id} key={state._key}>\n            {output(node.content, state)}\n          </node.tag>\n        )\n      },\n    } as MarkdownToJSX.Rule<{\n      content: MarkdownToJSX.ParserResult\n      id: string\n      level: number\n      tag: MarkdownToJSX.HTMLTags\n    }>,\n\n    headingSetext: {\n      _match: blockRegex(HEADING_SETEXT_R),\n      _order: Priority.MAX,\n      _parse(capture, parse, state) {\n        return {\n          content: parseInline(parse, capture[1], state),\n          level: capture[2] === '=' ? 1 : 2,\n          type: 'heading',\n        }\n      },\n    },\n\n    htmlComment: {\n      _match: anyScopeRegex(HTML_COMMENT_R),\n      _order: Priority.HIGH,\n      _parse() {\n        return {}\n      },\n      _react: renderNothing,\n    },\n\n    image: {\n      _match: simpleInlineRegex(IMAGE_R),\n      _order: Priority.HIGH,\n      _parse(capture /*, parse, state*/) {\n        return {\n          alt: capture[1],\n          target: unescapeUrl(capture[2]),\n          title: capture[3],\n        }\n      },\n      _react(node, output, state) {\n        return (\n          <img\n            key={state._key}\n            alt={node.alt || undefined}\n            title={node.title || undefined}\n            src={sanitizeUrl(node.target)}\n          />\n        )\n      },\n    } as MarkdownToJSX.Rule<{ alt?: string; target: string; title?: string }>,\n\n    link: {\n      _match: inlineRegex(LINK_R),\n      _order: Priority.LOW,\n      _parse(capture, parse, state) {\n        return {\n          content: parseSimpleInline(parse, capture[1], state),\n          target: unescapeUrl(capture[2]),\n          title: capture[3],\n        }\n      },\n      _react(node, output, state) {\n        return (\n          <a\n            key={state._key}\n            href={sanitizeUrl(node.target)}\n            title={node.title}\n          >\n            {output(node.content, state)}\n          </a>\n        )\n      },\n    } as MarkdownToJSX.Rule<{\n      content: MarkdownToJSX.ParserResult\n      target: string\n      title?: string\n    }>,\n\n    // https://daringfireball.net/projects/markdown/syntax#autolink\n    linkAngleBraceStyleDetector: {\n      _match: inlineRegex(LINK_AUTOLINK_R),\n      _order: Priority.MAX,\n      _parse(capture /*, parse, state*/) {\n        return {\n          content: [\n            {\n              content: capture[1],\n              type: 'text',\n            },\n          ],\n          target: capture[1],\n          type: 'link',\n        }\n      },\n    },\n\n    linkBareUrlDetector: {\n      _match: (source, state) => {\n        if (state._inAnchor) {\n          return null\n        }\n        return inlineRegex(LINK_AUTOLINK_BARE_URL_R)(source, state)\n      },\n      _order: Priority.MAX,\n      _parse(capture /*, parse, state*/) {\n        return {\n          content: [\n            {\n              content: capture[1],\n              type: 'text',\n            },\n          ],\n          target: capture[1],\n          title: undefined,\n          type: 'link',\n        }\n      },\n    },\n\n    linkMailtoDetector: {\n      _match: inlineRegex(LINK_AUTOLINK_MAILTO_R),\n      _order: Priority.MAX,\n      _parse(capture /*, parse, state*/) {\n        let address = capture[1]\n        let target = capture[1]\n\n        // Check for a `mailto:` already existing in the link:\n        if (!AUTOLINK_MAILTO_CHECK_R.test(target)) {\n          target = 'mailto:' + target\n        }\n\n        return {\n          content: [\n            {\n              content: address.replace('mailto:', ''),\n              type: 'text',\n            },\n          ],\n          target: target,\n          type: 'link',\n        }\n      },\n    },\n\n    list: {\n      _match(source, state, prevCapture) {\n        // We only want to break into a list if we are at the start of a\n        // line. This is to avoid parsing \"hi * there\" with \"* there\"\n        // becoming a part of a list.\n        // You might wonder, \"but that's inline, so of course it wouldn't\n        // start a list?\". You would be correct! Except that some of our\n        // lists can be inline, because they might be inside another list,\n        // in which case we can parse with inline scope, but need to allow\n        // nested lists inside this inline scope.\n        const isStartOfLine = LIST_LOOKBEHIND_R.exec(prevCapture)\n        const isListBlock = state._list || !state._inline\n\n        if (isStartOfLine && isListBlock) {\n          source = isStartOfLine[1] + source\n\n          return LIST_R.exec(source)\n        } else {\n          return null\n        }\n      },\n      _order: Priority.HIGH,\n      _parse(capture, parse, state) {\n        const bullet = capture[2]\n        const ordered = bullet.length > 1\n        const start = ordered ? +bullet : undefined\n        const items = capture[0]\n          // recognize the end of a paragraph block inside a list item:\n          // two or more newlines at end end of the item\n          .replace(BLOCK_END_R, '\\n')\n          .match(LIST_ITEM_R)\n\n        let lastItemWasAParagraph = false\n        const itemContent = items.map(function (item, i) {\n          // We need to see how far indented the item is:\n          const space = LIST_ITEM_PREFIX_R.exec(item)[0].length\n\n          // And then we construct a regex to \"unindent\" the subsequent\n          // lines of the items by that amount:\n          const spaceRegex = new RegExp('^ {1,' + space + '}', 'gm')\n\n          // Before processing the item, we need a couple things\n          const content = item\n            // remove indents on trailing lines:\n            .replace(spaceRegex, '')\n            // remove the bullet:\n            .replace(LIST_ITEM_PREFIX_R, '')\n\n          // Handling \"loose\" lists, like:\n          //\n          //  * this is wrapped in a paragraph\n          //\n          //  * as is this\n          //\n          //  * as is this\n          const isLastItem = i === items.length - 1\n          const containsBlocks = content.indexOf('\\n\\n') !== -1\n\n          // Any element in a list is a block if it contains multiple\n          // newlines. The last element in the list can also be a block\n          // if the previous item in the list was a block (this is\n          // because non-last items in the list can end with \\n\\n, but\n          // the last item can't, so we just \"inherit\" this property\n          // from our previous element).\n          const thisItemIsAParagraph =\n            containsBlocks || (isLastItem && lastItemWasAParagraph)\n          lastItemWasAParagraph = thisItemIsAParagraph\n\n          // backup our state for restoration afterwards. We're going to\n          // want to set state._list to true, and state._inline depending\n          // on our list's looseness.\n          const oldStateInline = state._inline\n          const oldStateList = state._list\n          state._list = true\n\n          // Parse inline if we're in a tight list, or block if we're in\n          // a loose list.\n          let adjustedContent\n          if (thisItemIsAParagraph) {\n            state._inline = false\n            adjustedContent = content.replace(LIST_ITEM_END_R, '\\n\\n')\n          } else {\n            state._inline = true\n            adjustedContent = content.replace(LIST_ITEM_END_R, '')\n          }\n\n          const result = parse(adjustedContent, state)\n\n          // Restore our state before returning\n          state._inline = oldStateInline\n          state._list = oldStateList\n\n          return result\n        })\n\n        return {\n          items: itemContent,\n          ordered: ordered,\n          start: start,\n        }\n      },\n      _react(node, output, state) {\n        const Tag = node.ordered ? 'ol' : 'ul'\n\n        return (\n          <Tag key={state._key} start={node.start}>\n            {node.items.map(function generateListItem(item, i) {\n              return <li key={i}>{output(item, state)}</li>\n            })}\n          </Tag>\n        )\n      },\n    } as MarkdownToJSX.Rule<{\n      items: MarkdownToJSX.ParserResult[]\n      ordered: boolean\n      start?: number\n    }>,\n\n    newlineCoalescer: {\n      _match: blockRegex(CONSECUTIVE_NEWLINE_R),\n      _order: Priority.LOW,\n      _parse: captureNothing,\n      _react(/*node, output, state*/) {\n        return '\\n'\n      },\n    },\n\n    paragraph: {\n      _match: matchParagraph,\n      _order: Priority.LOW,\n      _parse: parseCaptureInline,\n      _react(node, output, state) {\n        return <p key={state._key}>{output(node.content, state)}</p>\n      },\n    } as MarkdownToJSX.Rule<ReturnType<typeof parseCaptureInline>>,\n\n    ref: {\n      _match: inlineRegex(REFERENCE_IMAGE_OR_LINK),\n      _order: Priority.MAX,\n      _parse(capture /*, parse*/) {\n        refs[capture[1]] = {\n          target: capture[2],\n          title: capture[4],\n        }\n\n        return {}\n      },\n      _react: renderNothing,\n    },\n\n    refImage: {\n      _match: simpleInlineRegex(REFERENCE_IMAGE_R),\n      _order: Priority.MAX,\n      _parse(capture) {\n        return {\n          alt: capture[1] || undefined,\n          ref: capture[2],\n        }\n      },\n      _react(node, output, state) {\n        return (\n          <img\n            key={state._key}\n            alt={node.alt}\n            src={sanitizeUrl(refs[node.ref].target)}\n            title={refs[node.ref].title}\n          />\n        )\n      },\n    } as MarkdownToJSX.Rule<{ alt?: string; ref: string }>,\n\n    refLink: {\n      _match: inlineRegex(REFERENCE_LINK_R),\n      _order: Priority.MAX,\n      _parse(capture, parse, state) {\n        return {\n          content: parse(capture[1], state),\n          fallbackContent: parse(\n            capture[0].replace(SQUARE_BRACKETS_R, '\\\\$1'),\n            state\n          ),\n          ref: capture[2],\n        }\n      },\n      _react(node, output, state) {\n        return refs[node.ref] ? (\n          <a\n            key={state._key}\n            href={sanitizeUrl(refs[node.ref].target)}\n            title={refs[node.ref].title}\n          >\n            {output(node.content, state)}\n          </a>\n        ) : (\n          <span key={state._key}>{output(node.fallbackContent, state)}</span>\n        )\n      },\n    } as MarkdownToJSX.Rule<{\n      content: MarkdownToJSX.ParserResult\n      fallbackContent: MarkdownToJSX.ParserResult\n      ref: string\n    }>,\n\n    table: {\n      _match: blockRegex(NP_TABLE_R),\n      _order: Priority.HIGH,\n      _parse: parseTable,\n      _react(node, output, state) {\n        return (\n          <table key={state._key}>\n            <thead>\n              <tr>\n                {node.header.map(function generateHeaderCell(content, i) {\n                  return (\n                    <th key={i} style={getTableStyle(node, i)}>\n                      {output(content, state)}\n                    </th>\n                  )\n                })}\n              </tr>\n            </thead>\n\n            <tbody>\n              {node.cells.map(function generateTableRow(row, i) {\n                return (\n                  <tr key={i}>\n                    {row.map(function generateTableCell(content, c) {\n                      return (\n                        <td key={c} style={getTableStyle(node, c)}>\n                          {output(content, state)}\n                        </td>\n                      )\n                    })}\n                  </tr>\n                )\n              })}\n            </tbody>\n          </table>\n        )\n      },\n    } as MarkdownToJSX.Rule<ReturnType<typeof parseTable>>,\n\n    tableSeparator: {\n      _match: function (source, state) {\n        if (!state._inTable) {\n          return null\n        }\n        return TABLE_SEPARATOR_R.exec(source)\n      },\n      _order: Priority.HIGH,\n      _parse: function () {\n        return { type: 'tableSeparator' }\n      },\n      // These shouldn't be reached, but in case they are, be reasonable:\n      _react() {\n        return ' | '\n      },\n    },\n\n    text: {\n      // Here we look for anything followed by non-symbols,\n      // double newlines, or double-space-newlines\n      // We break on any symbol characters so that this grammar\n      // is easy to extend without needing to modify this regex\n      _match: anyScopeRegex(TEXT_PLAIN_R),\n      _order: Priority.MIN,\n      _parse(capture /*, parse, state*/) {\n        return {\n          content: capture[0]\n            // nbsp -> unicode equivalent for named chars\n            .replace(HTML_CHAR_CODE_R, (full, inner) => {\n              return options.namedCodesToUnicode[inner]\n                ? options.namedCodesToUnicode[inner]\n                : full\n            }),\n        }\n      },\n      _react(node /*, output, state*/) {\n        return node.content\n      },\n    } as MarkdownToJSX.Rule<{ content: string }>,\n\n    textBolded: {\n      _match: simpleInlineRegex(TEXT_BOLD_R),\n      _order: Priority.MED,\n      _parse(capture, parse, state) {\n        return {\n          // capture[1] -> the syntax control character\n          // capture[2] -> inner content\n          content: parse(capture[2], state),\n        }\n      },\n      _react(node, output, state) {\n        return <strong key={state._key}>{output(node.content, state)}</strong>\n      },\n    } as MarkdownToJSX.Rule<ReturnType<MarkdownToJSX.NestedParser>>,\n\n    textEmphasized: {\n      _match: simpleInlineRegex(TEXT_EMPHASIZED_R),\n      _order: Priority.LOW,\n      _parse(capture, parse, state) {\n        return {\n          // capture[1] -> opening * or _\n          // capture[2] -> inner content\n          content: parse(capture[2], state),\n        }\n      },\n      _react(node, output, state) {\n        return <em key={state._key}>{output(node.content, state)}</em>\n      },\n    } as MarkdownToJSX.Rule<ReturnType<MarkdownToJSX.NestedParser>>,\n\n    textEscaped: {\n      // We don't allow escaping numbers, letters, or spaces here so that\n      // backslashes used in plain text still get rendered. But allowing\n      // escaping anything else provides a very flexible escape mechanism,\n      // regardless of how this grammar is extended.\n      _match: simpleInlineRegex(TEXT_ESCAPED_R),\n      _order: Priority.HIGH,\n      _parse(capture /*, parse, state*/) {\n        return {\n          content: capture[1],\n          type: 'text',\n        }\n      },\n    },\n\n    textStrikethroughed: {\n      _match: simpleInlineRegex(TEXT_STRIKETHROUGHED_R),\n      _order: Priority.LOW,\n      _parse: parseCaptureInline,\n      _react(node, output, state) {\n        return <del key={state._key}>{output(node.content, state)}</del>\n      },\n    } as MarkdownToJSX.Rule<ReturnType<typeof parseCaptureInline>>,\n  }\n\n  // Object.keys(rules).forEach(key => {\n  //     let { match, parse } = rules[key];\n\n  //     rules[key]._match = (...args) => {\n  //         const start = performance.now();\n  //         const result = match(...args);\n  //         const delta = performance.now() - start;\n\n  //         if (delta > 5)\n  //             console.warn(\n  //                 `Slow match for ${key}: ${delta.toFixed(3)}ms, input: ${\n  //                     args[0]\n  //                 }`\n  //             );\n\n  //         return result;\n  //     };\n\n  //     rules[key]._parse = (...args) => {\n  //         const start = performance.now();\n  //         const result = parse(...args);\n  //         const delta = performance.now() - start;\n\n  //         if (delta > 5)\n  //             console.warn(`Slow parse for ${key}: ${delta.toFixed(3)}ms`);\n\n  //         console.log(`${key}:parse`, `${delta.toFixed(3)}ms`, args[0]);\n\n  //         return result;\n  //     };\n  // });\n\n  if (options.disableParsingRawHTML !== true) {\n    rules.htmlBlock = {\n      /**\n       * find the first matching end tag and process the interior\n       */\n      _match: anyScopeRegex(HTML_BLOCK_ELEMENT_R),\n      _order: Priority.HIGH,\n      _parse(capture, parse, state) {\n        const [, whitespace] = capture[3].match(HTML_LEFT_TRIM_AMOUNT_R)\n        const trimmer = new RegExp(`^${whitespace}`, 'gm')\n        const trimmed = capture[3].replace(trimmer, '')\n\n        const parseFunc = containsBlockSyntax(trimmed)\n          ? parseBlock\n          : parseInline\n\n        const tagName = capture[1].toLowerCase() as MarkdownToJSX.HTMLTags\n        const noInnerParse =\n          DO_NOT_PROCESS_HTML_ELEMENTS.indexOf(tagName) !== -1\n\n        state._inAnchor = state._inAnchor || tagName === 'a'\n\n        /**\n         * if another html block is detected within, parse as block,\n         * otherwise parse as inline to pick up any further markdown\n         */\n        const content = noInnerParse\n          ? capture[3]\n          : parseFunc(parse, trimmed, state)\n\n        state._inAnchor = false\n\n        return {\n          attrs: attrStringToMap(capture[2]),\n          content,\n\n          noInnerParse,\n\n          tag: noInnerParse ? tagName : capture[1],\n        }\n      },\n      _react(node, output, state) {\n        return (\n          // @ts-ignore\n          <node.tag key={state._key} {...node.attrs}>\n            {node.noInnerParse\n              ? (node.content as string)\n              : output(node.content as MarkdownToJSX.ParserResult, state)}\n          </node.tag>\n        )\n      },\n    } as MarkdownToJSX.Rule<{\n      attrs: ReturnType<typeof attrStringToMap>\n      content: string | ReturnType<MarkdownToJSX.NestedParser>\n      noInnerParse: Boolean\n      tag: string\n    }>\n\n    rules.htmlSelfClosing = {\n      /**\n       * find the first matching end tag and process the interior\n       */\n      _match: anyScopeRegex(HTML_SELF_CLOSING_ELEMENT_R),\n      _order: Priority.HIGH,\n      _parse(capture /*, parse, state*/) {\n        return {\n          attrs: attrStringToMap(capture[2] || ''),\n          tag: capture[1],\n        }\n      },\n      _react(node, output, state) {\n        return <node.tag {...node.attrs} key={state._key} />\n      },\n    } as MarkdownToJSX.Rule<{\n      attrs: ReturnType<typeof attrStringToMap>\n      tag: string\n    }>\n  }\n\n  const parser = parserFor(rules)\n  const emitter: Function = reactFor(ruleOutput(rules))\n\n  const jsx = compile(markdown)\n\n  if (footnotes.length) {\n    return (\n      <div>\n        {jsx}\n        <footer key=\"footer\">\n          {footnotes.map(function createFootnote(def) {\n            return (\n              <div id={options.slugify(def.identifier)} key={def.identifier}>\n                {def.identifier}\n                {emitter(parser(def.footnote, { _inline: true }))}\n              </div>\n            )\n          })}\n        </footer>\n      </div>\n    )\n  }\n\n  return jsx\n}\n\n/**\n * A simple HOC for easy React use. Feed the markdown content as a direct child\n * and the rest is taken care of automatically.\n */\nconst Markdown: React.FC<{\n  [key: string]: any\n  children: string\n  options?: MarkdownToJSX.Options\n}> = ({ children, options, ...props }) => {\n  return React.cloneElement(\n    compiler(children, options),\n    props as React.Props<any>\n  )\n}\n\nexport default Markdown\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}